{"version":3,"sources":["styles/App.module.css","app/hooks.ts","features/staff/staffSlice.ts","features/staff/staffAPI.ts","components/Birthday.tsx","components/BirthdayMonth.tsx","features/utils.ts","components/BirthdayList.tsx","components/Employee.tsx","components/EmployeeList.tsx","containers/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","allStaff","activeStaffIds","status","getStaffAsync","createAsyncThunk","a","axios","get","then","res","data","catch","err","alert","console","log","response","staffSlice","createSlice","name","reducers","addActiveEmployee","state","action","push","payload","removeActiveEmployee","filter","id","resetState","extraReducers","builder","addCase","pending","fulfilled","actions","selectAllStaff","staff","selectActiveStaffIds","selectStaffOrderedByMob","length","arr","Array","from","keys","orderedStaff","forEach","month","map","employee","selectActiveStaff","getMonth","parseJSON","dob","Birthday","props","fullName","lastName","concat","firstName","className","styles","birthday","format","BirthdayMonth","list","sortedStaff","sort","b","nameA","toUpperCase","nameB","displayMonth","birthdayMonth","letterTitle","BirthdayList","dispatch","staffOrderedByMobFromCurrent","currentMonth","Date","preMonths","slice","orderStaffListArrFromCurrentMonth","birthdayListContanier","listTitle","birthdayMonthList","staffArr","index","clearButton","onClick","infoTitle","Employee","isActive","includes","handleRadioChange","target","value","employeeActive","type","onChange","e","checked","htmlFor","EmployeeList","useEffect","abc","i","String","fromCharCode","charCodeAt","employeeListContanier","employeeList","letter","filteredStaff","App","app","persistConfig","key","storage","persistedReducer","persistReducer","staffReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bcdee12c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1Uz4n\",\"employeeListContanier\":\"App_employeeListContanier__1GM7t\",\"birthdayListContanier\":\"App_birthdayListContanier__3bCGL\",\"listTitle\":\"App_listTitle__2yQiW\",\"letterTitle\":\"App_letterTitle__2F5B8\",\"infoTitle\":\"App_infoTitle__3Tbc-\",\"fullName\":\"App_fullName__2zjSl\",\"birthdayMonthList\":\"App_birthdayMonthList__t5D7W\",\"birthdayMonth\":\"App_birthdayMonth__2HW7G\",\"birthday\":\"App_birthday__sRyGD\",\"employeeList\":\"App_employeeList__1ZUHF\",\"employee\":\"App_employee__9YYSF\",\"employeeActive\":\"App_employeeActive__2FKr-\",\"clearButton\":\"App_clearButton__wI9AB\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"./store\";\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\nimport { fetchStaff } from \"./staffAPI\";\nimport { getMonth, parseJSON } from \"date-fns\";\nimport { IStaffState, TEmployeeList } from \"../../app/types\";\n\nconst initialState: IStaffState = {\n  allStaff: [],\n  activeStaffIds: [],\n  status: \"idle\",\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const getStaffAsync = createAsyncThunk(\"staff/fetchStaff\", async () => {\n  const response = await fetchStaff();\n  // The value we return becomes the `fulfilled` action payload\n  return response;\n});\n\nexport const staffSlice = createSlice({\n  name: \"staff\",\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    addActiveEmployee: (state, action: PayloadAction<string>) => {\n      state.activeStaffIds.push(action.payload);\n    },\n    removeActiveEmployee: (state, action: PayloadAction<string>) => {\n      state.activeStaffIds = state.activeStaffIds.filter(\n        (id) => id !== action.payload\n      );\n    },\n    resetState: (state, action: PayloadAction<string>) => {\n      console.log(action.payload);\n      state.activeStaffIds = initialState.activeStaffIds;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(getStaffAsync.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(getStaffAsync.fulfilled, (state, action) => {\n        state.status = \"idle\";\n        state.allStaff = action.payload;\n      });\n  },\n});\n\nexport const { addActiveEmployee, removeActiveEmployee, resetState } =\n  staffSlice.actions;\n\n// The functions below are called a selector and allow us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectAllStaff = (state: RootState): TEmployeeList =>\n  state.staff.allStaff;\nexport const selectActiveStaffIds = (state: RootState): string[] =>\n  state.staff.activeStaffIds;\nexport const selectActiveStaff = (state: RootState): TEmployeeList => {\n  return state.staff.activeStaffIds.map(\n    (id) => state.staff.allStaff.filter((employee) => employee.id === id)[0]\n  );\n};\nexport const selectStaffOrderedByMob = (state: RootState): TEmployeeList[] => {\n  if (!state.staff.activeStaffIds.length) return [];\n  const arr = Array.from(Array(12).keys());\n  const orderedStaff: TEmployeeList[] = [];\n  arr.forEach(\n    (month) =>\n      (orderedStaff[month] = selectActiveStaff(state).filter(\n        (employee) => getMonth(parseJSON(employee.dob)) === month\n      ))\n  );\n  return orderedStaff;\n};\n\nexport default staffSlice.reducer;\n","import axios from \"axios\";\n\nexport function fetchStaff() {\n  return axios\n    .get(\"https://yalantis-react-school-api.yalantis.com/api/task0/users\")\n    .then((res) => {\n      return res.data;\n    })\n    .catch((err) => {\n      alert(\"Oops, something went wrong...\");\n      console.log(\"ERROR\", err);\n      return err;\n    });\n}\n","import React from \"react\";\r\nimport { format, parseJSON } from \"date-fns\";\r\nimport { IEmployee } from \"../app/types\";\r\nimport styles from \"../styles/App.module.css\";\r\n\r\nexport function Birthday(props: { employee: IEmployee }): React.ReactElement {\r\n  const { employee } = props;\r\n  const fullName: string = employee.lastName.concat(\" \", employee.firstName);\r\n\r\n  return (\r\n    <li className={styles.birthday}>\r\n      {fullName}&nbsp;-&nbsp;{format(parseJSON(employee.dob), \"dd MMMM, yyyy\")}\r\n      &nbsp;year\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Birthday;\r\n","import React from \"react\";\r\nimport { getMonth, parseJSON } from \"date-fns\";\r\nimport { sortByLastName } from \"../features/utils\";\r\nimport { TEmployeeList } from \"../app/types\";\r\nimport Birthday from \"./Birthday\";\r\n\r\nimport styles from \"../styles/App.module.css\";\r\n\r\nexport function BirthdayMonth(props: {\r\n  month: number;\r\n  staff: TEmployeeList;\r\n}): React.ReactElement {\r\n  const { month, staff } = props;\r\n  const sortedStaff = sortByLastName(staff);\r\n  const displayMonth = getMonth(parseJSON(staff[0].dob));\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  return (\r\n    <li key={month} className={styles.birthdayMonth}>\r\n      <p className={styles.letterTitle}>{monthNames[displayMonth]}</p>\r\n      <ul>\r\n        {sortedStaff.map((employee) => (\r\n          <Birthday key={employee.id} employee={employee} />\r\n        ))}\r\n      </ul>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default BirthdayMonth;\r\n","import { getMonth } from \"date-fns\";\r\nimport { IEmployee, TEmployeeList } from \"../app/types\";\r\n\r\nexport function sortByLastName(list: TEmployeeList): TEmployeeList {\r\n  list.sort((a: IEmployee, b: IEmployee) => {\r\n    var nameA = a.lastName.toUpperCase(); // ignore upper and lowercase\r\n    var nameB = b.lastName.toUpperCase(); // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n    // if names are equal\r\n    return 0;\r\n  });\r\n  return list;\r\n}\r\n\r\nexport function orderStaffListArrFromCurrentMonth(\r\n  list: TEmployeeList[]\r\n): TEmployeeList[] {\r\n  const currentMonth = getMonth(new Date());\r\n  if (currentMonth === 0) return list;\r\n  const preMonths: TEmployeeList[] = list.slice(0, currentMonth);\r\n  const postMonths: TEmployeeList[] = list.slice(currentMonth);\r\n  return postMonths.concat(preMonths);\r\n}\r\n","import React from \"react\";\r\n// import { persistor } from \"../app/store\";\r\nimport { useAppSelector, useAppDispatch } from \"../app/hooks\";\r\nimport { orderStaffListArrFromCurrentMonth } from \"../features/utils\";\r\nimport {\r\n  resetState,\r\n  selectActiveStaffIds,\r\n  selectStaffOrderedByMob,\r\n} from \"../features/staff/staffSlice\";\r\nimport BirthdayMonth from \"./BirthdayMonth\";\r\n\r\nimport styles from \"../styles/App.module.css\";\r\n\r\nexport function BirthdayList(): React.ReactElement {\r\n  const dispatch = useAppDispatch();\r\n  const activeStaffIds = useAppSelector(selectActiveStaffIds);\r\n  const staffOrderedByMob = useAppSelector(selectStaffOrderedByMob);\r\n  const staffOrderedByMobFromCurrent =\r\n    orderStaffListArrFromCurrentMonth(staffOrderedByMob);\r\n\r\n  return (\r\n    <div className={styles.birthdayListContanier}>\r\n      <p className={styles.listTitle}>Employees' Birthdays</p>\r\n      <hr></hr>\r\n      {activeStaffIds.length ? (\r\n        <ul className={styles.birthdayMonthList}>\r\n          {staffOrderedByMobFromCurrent.map((staffArr, index) =>\r\n            staffArr.length ? (\r\n              <BirthdayMonth key={index} month={index} staff={staffArr} />\r\n            ) : null\r\n          )}\r\n          <button\r\n            className={styles.clearButton}\r\n            onClick={() => dispatch(resetState(\"ResetActive\"))}\r\n          >\r\n            Clear all\r\n          </button>\r\n        </ul>\r\n      ) : (\r\n        <p className={styles.infoTitle}>Employees List is empty</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BirthdayList;\r\n","import React from \"react\";\r\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\r\nimport {\r\n  addActiveEmployee,\r\n  removeActiveEmployee,\r\n  selectActiveStaffIds,\r\n} from \"../features/staff/staffSlice\";\r\nimport styles from \"../styles/App.module.css\";\r\n\r\nexport function Employee(props: {\r\n  firstName: string;\r\n  lastName: string;\r\n  id: string;\r\n}): React.ReactElement {\r\n  const { firstName, lastName, id } = props;\r\n  const fullName: string = lastName.concat(\" \", firstName);\r\n  const dispatch = useAppDispatch();\r\n  const activeStaffIds = useAppSelector(selectActiveStaffIds);\r\n  const isActive: boolean = activeStaffIds.includes(id);\r\n\r\n  function handleRadioChange(target: EventTarget & HTMLInputElement) {\r\n    target.value === \"false\"\r\n      ? dispatch(removeActiveEmployee(target.id))\r\n      : dispatch(addActiveEmployee(target.id));\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        isActive\r\n          ? styles.employee + \" \" + styles.employeeActive\r\n          : styles.employee\r\n      }\r\n    >\r\n      <p className={styles.fullName}>{fullName}</p>\r\n      <div className=\"radioButton\">\r\n        <input\r\n          type=\"radio\"\r\n          id={id}\r\n          name={fullName}\r\n          value=\"false\"\r\n          onChange={(e) => handleRadioChange(e.target)}\r\n          checked={!isActive}\r\n        />\r\n        <label htmlFor=\"notActiveRadio\">not active</label>\r\n      </div>\r\n      <div className=\"radioButton\">\r\n        <input\r\n          type=\"radio\"\r\n          id={id}\r\n          name={fullName}\r\n          value=\"true\"\r\n          onChange={(e) => handleRadioChange(e.target)}\r\n          checked={isActive}\r\n        />\r\n        <label htmlFor=\"activeRadio\">active</label>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Employee;\r\n","import React, { useEffect } from \"react\";\r\nimport Employee from \"./Employee\";\r\nimport { useAppSelector, useAppDispatch } from \"../app/hooks\";\r\nimport { getStaffAsync, selectAllStaff } from \"../features/staff/staffSlice\";\r\n\r\nimport styles from \"../styles/App.module.css\";\r\n\r\nexport function EmployeeList(): React.ReactElement {\r\n  const dispatch = useAppDispatch();\r\n  const staff = useAppSelector(selectAllStaff);\r\n\r\n  useEffect(() => {\r\n    dispatch(getStaffAsync());\r\n  }, []);\r\n\r\n  const abc: string[] = [];\r\n  for (let i = 0; i < 26; i++) {\r\n    abc.push(String.fromCharCode(\"A\".charCodeAt(0) + i));\r\n  }\r\n\r\n  return (\r\n    <div className={styles.employeeListContanier}>\r\n      <p className={styles.listTitle}>Employees</p>\r\n      <hr></hr>\r\n      {staff.length ? (\r\n        <ul className={styles.employeeList}>\r\n          {abc.map((letter, index) => {\r\n            const filteredStaff = staff.filter(\r\n              (employee) => employee.lastName[0].toUpperCase() === letter\r\n            );\r\n            if (filteredStaff.length)\r\n              return (\r\n                <li key={letter}>\r\n                  <p className={styles.letterTitle}>{letter}</p>\r\n                  {filteredStaff.map((employee) => (\r\n                    <Employee\r\n                      key={employee.id}\r\n                      firstName={employee.firstName}\r\n                      lastName={employee.lastName}\r\n                      id={employee.id}\r\n                    />\r\n                  ))}\r\n                </li>\r\n              );\r\n            else\r\n              return (\r\n                <li key={letter}>\r\n                  <p className={styles.letterTitle}>{letter}</p>\r\n                  <p className={styles.fullName}>---</p>\r\n                </li>\r\n              );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <p>Loading employee data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeList;\r\n","import React from 'react'\nimport BirthdayList from '../components/BirthdayList'\nimport EmployeeList from '../components/EmployeeList'\nimport styles from '../styles/App.module.css'\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n        <EmployeeList />\n        <BirthdayList />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport staffReducer from \"../features/staff/staffSlice\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, staffReducer);\n\nexport const store = configureStore({\n  reducer: {\n    staff: persistedReducer,\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n});\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./containers/App\";\nimport { store, persistor } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}