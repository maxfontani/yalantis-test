import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { fetchStaff } from "./staffAPI";
import { getMonth, parseJSON } from "date-fns";
import { IStaffState, TEmployeeList } from "../../app/types";

const initialState: IStaffState = {
  allStaff: [],
  activeStaffIds: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getStaffAsync = createAsyncThunk("staff/fetchStaff", async () => {
  const response = await fetchStaff();
  // The value we return becomes the `fulfilled` action payload
  return response;
});

export const staffSlice = createSlice({
  name: "staff",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    addActiveEmployee: (state, action: PayloadAction<string>) => {
      action.payload && state.activeStaffIds.push(action.payload);
    },
    removeActiveEmployee: (state, action: PayloadAction<string>) => {
      state.activeStaffIds = state.activeStaffIds.filter(
        (id) => id !== action.payload
      );
    },
    resetState: (state, action: PayloadAction<string>) => {
      state.activeStaffIds = initialState.activeStaffIds;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getStaffAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getStaffAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.allStaff = action.payload;
      });
  },
});

export const { addActiveEmployee, removeActiveEmployee, resetState } =
  staffSlice.actions;

// The functions below are called a selector and allow us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAllStaff = (state: RootState): TEmployeeList =>
  state.staff.allStaff;
export const selectActiveStaffIds = (state: RootState): string[] =>
  state.staff.activeStaffIds;
export const selectActiveStaff = (state: RootState): TEmployeeList => {
  return state.staff.activeStaffIds.map(
    (id) => state.staff.allStaff.filter((employee) => employee.id === id)[0]
  );
};
export const selectStaffOrderedByMob = (state: RootState): TEmployeeList[] => {
  if (!state.staff.activeStaffIds.length) return [];
  const arr = Array.from(Array(12).keys());
  const orderedStaff: TEmployeeList[] = [];
  arr.forEach(
    (month) =>
      (orderedStaff[month] = selectActiveStaff(state).filter(
        (employee) => getMonth(parseJSON(employee.dob)) === month
      ))
  );
  return orderedStaff;
};

export default staffSlice.reducer;
